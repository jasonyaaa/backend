name: Unit Tests

on:
  push:
    # 任何分支的推送都會觸發測試
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Display test info
        run: |
          echo "=== VocalBorn Unit Tests ==="
          echo "Branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Commit: ${{ github.sha }}"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python 3.13
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --group dev

      - name: Set up test environment
        run: |
          # 建立測試環境變數
          echo "SECRET_KEY=test-secret-key-for-development-only-do-not-use-in-production" >> $GITHUB_ENV
          echo "EMAIL_API_URL=http://localhost:8080/api/email" >> $GITHUB_ENV
          echo "EMAIL_API_TOKEN=test-email-api-token" >> $GITHUB_ENV
          echo "DATABASE_URL=sqlite:///test_vocalborn.db" >> $GITHUB_ENV
          echo "BASE_URL=http://localhost:8000" >> $GITHUB_ENV
          echo "JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30" >> $GITHUB_ENV
          echo "JWT_REFRESH_TOKEN_EXPIRE_DAYS=7" >> $GITHUB_ENV
          echo "JWT_ALGORITHM=HS256" >> $GITHUB_ENV
          echo "EMAIL_VERIFICATION_EXPIRE_HOURS=24" >> $GITHUB_ENV
          echo "PASSWORD_RESET_EXPIRE_HOURS=1" >> $GITHUB_ENV
          echo "PAIRING_TOKEN_DEFAULT_EXPIRE_HOURS=24" >> $GITHUB_ENV
          echo "PAIRING_TOKEN_DEFAULT_MAX_USES=5" >> $GITHUB_ENV
          echo "ENVIRONMENT=test" >> $GITHUB_ENV
          echo "DEBUG=true" >> $GITHUB_ENV

      - name: Run unit tests
        run: |
          # 執行單元測試（忽略需要外部服務的測試）
          uv run pytest tests/ -v --disable-warnings \
            --ignore=tests/storage/test_audio_storage_service.py \
            --ignore=tests/therapist/test_therapist_service.py \
            -k "not test_send_email"

      - name: Generate test coverage report
        run: |
          uv run coverage run -m pytest tests/ \
            --ignore=tests/storage/test_audio_storage_service.py \
            --ignore=tests/therapist/test_therapist_service.py \
            -k "not test_send_email"
          uv run coverage report --show-missing
          uv run coverage xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage.xml
            .coverage
