"""調整練習表

Revision ID: 9a7b581ee2c3
Revises: 775631cb8e1e
Create Date: 2025-07-21 21:12:55.694146

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '9a7b581ee2c3'
down_revision: Union[str, None] = '775631cb8e1e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 建立 practicerecordstatus ENUM 類型（如果不存在）
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE practicerecordstatus AS ENUM ('PENDING', 'RECORDED', 'AI_QUEUED', 'AI_PROCESSING', 'AI_ANALYZED', 'ANALYZED');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    
    op.create_table('practice_sessions',
    sa.Column('practice_session_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('chapter_id', sa.Uuid(), nullable=False),
    sa.Column('session_status', sa.Enum('IN_PROGRESS', 'COMPLETED', 'PAUSED', 'ABANDONED', name='practicesessionstatus', create_type=False), nullable=False),
    sa.Column('begin_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('total_duration', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapters.chapter_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('practice_session_id')
    )
    op.create_table('practice_feedbacks',
    sa.Column('feedback_id', sa.Uuid(), nullable=False),
    sa.Column('practice_record_id', sa.Uuid(), nullable=False),
    sa.Column('therapist_id', sa.Uuid(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('pronunciation_accuracy', sa.Float(), nullable=True),
    sa.Column('suggestions', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['practice_record_id'], ['practice_records.practice_record_id'], ),
    sa.ForeignKeyConstraint(['therapist_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('feedback_id'),
    sa.UniqueConstraint('practice_record_id')
    )
    op.add_column('practice_records', sa.Column('practice_session_id', sa.Uuid(), nullable=False))
    op.add_column('practice_records', sa.Column('record_status', sa.Enum('PENDING', 'RECORDED', 'AI_QUEUED', 'AI_PROCESSING', 'AI_ANALYZED', 'ANALYZED', name='practicerecordstatus', create_type=False), nullable=False))
    op.add_column('practice_records', sa.Column('audio_duration', sa.Float(), nullable=True))
    op.add_column('practice_records', sa.Column('file_size', sa.Integer(), nullable=True))
    op.add_column('practice_records', sa.Column('content_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('practice_records', sa.Column('recorded_at', sa.DateTime(), nullable=True))
    op.add_column('practice_records', sa.Column('updated_at', sa.DateTime(), nullable=False))
    # 檢查約束是否存在，存在才刪除
    op.execute("""
        DO $$ BEGIN
            IF EXISTS (SELECT 1 FROM information_schema.table_constraints 
                      WHERE constraint_name = 'practice_records_user_id_fkey' 
                      AND table_name = 'practice_records') THEN
                ALTER TABLE practice_records DROP CONSTRAINT practice_records_user_id_fkey;
            END IF;
        END $$;
    """)
    op.create_foreign_key('fk_practice_records_practice_session_id_practice_sessions', 'practice_records', 'practice_sessions', ['practice_session_id'], ['practice_session_id'])
    op.drop_column('practice_records', 'user_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('practice_records', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint('fk_practice_records_practice_session_id_practice_sessions', 'practice_records', type_='foreignkey')
    op.create_foreign_key(op.f('practice_records_user_id_fkey'), 'practice_records', 'users', ['user_id'], ['user_id'])
    op.drop_column('practice_records', 'updated_at')
    op.drop_column('practice_records', 'recorded_at')
    op.drop_column('practice_records', 'content_type')
    op.drop_column('practice_records', 'file_size')
    op.drop_column('practice_records', 'audio_duration')
    op.drop_column('practice_records', 'record_status')
    op.drop_column('practice_records', 'practice_session_id')
    op.drop_table('practice_feedbacks')
    op.drop_table('practice_sessions')
    
    # 刪除 ENUM 類型
    op.execute("DROP TYPE IF EXISTS practicerecordstatus")
    op.execute("DROP TYPE IF EXISTS practicesessionstatus")
    # ### end Alembic commands ###
